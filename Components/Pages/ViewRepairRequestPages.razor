@page "/request-detail/{id:int}"

@inject MaintenanceRequestServices MRS;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;

<RadzenCard>

    <RadzenText TextStyle="TextStyle.DisplayH5">Request Detail</RadzenText>
    <hr />
        <div>
            <RadzenLabel Text="Plate Name:" />
            <RadzenText Text=@(plateName) />
        </div>
        <div>
            <RadzenLabel Text="Request Date:" />
            <RadzenText Text=@request.RequestDatetime.ToString("dd/MM/yyyy") />
        </div>
        <div>
            <RadzenLabel Text="Repair Reason:" />
            <RadzenText Text=@request.RepairReason />
        </div>
        <div>
            <RadzenLabel Text="Repair Remark:" />
            <RadzenText Text=@(request.RepairRemark ?? "N/A") />
        </div>
        <hr />

        <h3>Maintenance Part</h3>
        @* <RadzenLabel Text="Repair Type" />
        <RadzenDropDown TValue="string" @bind-Value="selectedRepair.RepairType" Data=@repairTypes  /> *@

    <div class="d-flex justify-content-left">
        <RadzenSelectBar @bind-Value=@selectedOption TValue="int" class="mb-3">
            <Items>
                <RadzenSelectBarItem Text="Supplier" Value="1" />
                <RadzenSelectBarItem Text="In-house" Value="2" />
            </Items>
        </RadzenSelectBar>
    </div>

        @if (selectedOption == 1)
        {
            <RadzenTemplateForm TItem="SupplierDetail" Data=@selectedSupplier Submit="@(async () => await onSupplierSubmit())">
            <RadzenLabel Text="Supplier" />
            <RadzenTextBox Name="SupplierName" @bind-Value="selectedSupplier.SupplierName" />
            <RadzenRequiredValidator Component="SupplierName" Text="Supplier Name is required" />

            <RadzenLabel Text="ETA" />
            <RadzenDatePicker Name="Eta" @bind-Value="selectedSupplier.Eta" />
            <RadzenRequiredValidator Component="Eta" Text="ETA is required" />

            <RadzenButton Text="Submit" ButtonType="ButtonType.Submit" />
            </RadzenTemplateForm>
        }
        else if(selectedOption == 2)
        {
            <RadzenTemplateForm TItem="Repair" Data=@selectedRepair Submit="@(async () => await onTechnicianSubmit())">
            <RadzenLabel Text="Technician Name" />
            <RadzenTextBox Name="TechnicianName" @bind-Value="selectedRepair.TechnicianName" />
            <RadzenRequiredValidator Component="TechnicianName" Text="Technician Name is required" />
            <RadzenButton Text="Submit" ButtonType="ButtonType.Submit" />
            </RadzenTemplateForm>
        }
   
</RadzenCard>

@code {
    [Parameter]
    public int Id { get; set; }

    private Request request = new Request();
    private Repair selectedRepair = new();
    private SupplierDetail selectedSupplier = new();
    private string plateName;

    private int selectedOption = 1;

    protected override async Task OnInitializedAsync(){
        try{    
            request = await MRS.getRequestById(Id);

            if(request == null){
                NavigationManager.NavigateTo("/maintenance-request-list");
                return;
            }
            plateName = request.Plate.PlateName;
        }
        catch (Exception ex){
            NavigationManager.NavigateTo("/maintenance-request-list");
        }   
    }

    private async Task onSupplierSubmit(){
        try{
            await MRS.insertIntoSupplierRepair(selectedSupplier, request);
            NotificationService.Notify(NotificationSeverity.Success, "Repair Request Accepted");
        }
        catch (Exception ex){
            NotificationService.Notify(NotificationSeverity.Error, ex.Message);
        }
    }

    private async Task onTechnicianSubmit(){
        try{
            await MRS.insertIntoTechnicianRepair(selectedRepair, request);
            NotificationService.Notify(NotificationSeverity.Success, "Repair Request Accepted");
        }
        catch (Exception ex){
            NotificationService.Notify(NotificationSeverity.Error, ex.Message);
        }
    }

}
